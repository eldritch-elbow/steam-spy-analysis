1/9
1/16
10*70
(10*70)*.3
3*70
7*30
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
p
pmf <- function(x) { x/10 }
plot(f, c(-1,5))
plot(f, 0,3)
plot(f, 0,4)
plot(pmf, 0,4)
exp
(1.0 * pmf(1.0))
(1.0 * pmf(1.0)) + (2.0 * pmf(2.0)) + (3.0 * pmf(3.0)) + (4.0 * pmf(4.0))
r
mean
c(1,2,3,4)
mean ( c(12,12,6,14) )
1-(20/36)
1/((0.5^2)+((1/6)^2)+((1/6)^2)+((1/6)^2))
c(2,4,4,4,5)
len(c(2,4,4,4,5))
length(c(2,4,4,4,5))
zscore
zsc <- function(obs,pop) {}
zsc <- function(obs,pop) {obs}
zsc(1,2)
zsc <- function(obs,pop) { ;
)
zsc <- function(obs,pop) { ;
}
zsc <- function(obs,pop) {
pop_len = length(pop);
}
zsc <- function(obs,pop) {
pop_len = length(pop);
pop_mean = mean(pop); }
pop = c(2,4,4,4,5,5,7,9)
mean(pop)
zsc <- function(obs,pop) {
pop_len = length(pop);
pop_mean = mean(pop); }
zsc <- function(obs,pop) {
pop_len = length(pop);
pop_mean = mean(pop);
pop_sdev = sd(pop);
}
zsc <- function(obs,pop) {
pop_mean = mean(pop);
pop_sdev = sd(pop);
(obs - pop_mean)/pop_sdev}
sd(c(5,5,5,5,5,10,10,10,10,10,15,15,15,15))
sd(c(5,5,5,5,5,5,10,10,10,10,10,15,15,15,15,15))
zsc(12, c(2, 4, 4, 4, 5, 5, 7, 9)
;
zsc(12, c(2, 4, 4, 4, 5, 5, 7, 9))
sqrt( sum(c(2, 4, 4, 4, 5, 5, 7, 9)) )
scale(c(2, 4, 4, 4, 5, 5, 7, 9))
sales <- function(P) { 20 - (4*P) };
plot(sales, c(5,10))
plot(sales)
plot(sales, c(5,10))
lapply
lapply(c(5,10), sales)
lapply(c(5,6,7,8,9,10), sales)
x = lapply(c(5,6,7,8,9,10), sales)
x
sales(5)
sales(6)
sales(7)
sales(8)
sales(9)
sales(10)
((1/1000)*(19950))+((999/1000)*(-30))
((0.001)*(19950))+((999/1000)*(-30))
((0.001)*(19950))+((0.999)*(-30))
((0.001)*(19950))
((0.999)*(-30))
((0.001)*(19950))+((0.999)*(-30))
source("http://bioconductor.org/biocLite.R")
install(knitr)
ss_data
getwd()
setwd("/Users/jsiddle/workspaces/my_projects/steam-spy-analysis")
install(knitr)
setwd("/Users/jsiddle/workspaces/my_projects/steam-spy-analysis")
setwd("/Users/jsiddle/workspaces/my_projects/steam-spy-analysis")
ss_data = read.csv("output/steamspy_out.csv")
ss_data
#   ylab="Time waited")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever, ss_data$avg_playtime_forever,
xlab="Players forever", ylab="Avg. playtime forever")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
ss_data
ss_data$name
plot(ss_data$players_forever,
ss_data$avg_playtime_forever,
xlab="Players forever",
ylab="Avg. playtime forever")
plot(ss_data$players_forever,
ss_data$avg_playtime_forever,
xlab="Players forever",
ylab="Avg. playtime forever",
log = "xy")
plot(ss_data$players_forever,
ss_data$avg_playtime_forever,
xlab="Players forever",
ylab="Avg. playtime forever",
log = "x")
plot(ss_data$players_forever,
ss_data$avg_playtime_forever,
xlab="Players forever",
ylab="Avg. playtime forever",
log = "y")
plot(ss_data$players_forever,
ss_data$avg_playtime_forever,
xlab="Players forever",
ylab="Avg. playtime forever",
log = "xy")
ss_data = read.csv("output/steamspy_out.csv")
ss_data$publisher
table(ss_data$publisher)
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever,
ss_data$owners,
xlab="Players forever",
ylab="Owners",
log = "xy")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever,
ss_data$owners,
xlab="Players forever",
ylab="Owners",
log = "xy")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever,
ss_data$owners,
xlab="Players forever",
ylab="Owners",
log = "xy")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever,
ss_data$owners,
xlab="Players forever",
ylab="Owners",
log = "")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever,
ss_data$owners,
xlab="Players forever",
ylab="Owners",
log = "xy")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
dim(ss_data$owners)
length(ss_data$owners)
x <- as.data.frame(table(ss_data));
x <- as.data.frame(table(ss_data$publisher));
x
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab[order(x$Freq, decreasing = TRUE), ]
pub_tab_ranked = pub_tab[order(x$Freq, decreasing = TRUE), ]
pub_tab_ranked[0..10]
pub_tab_ranked[1,10]
pub_tab_ranked
hist(pub_tab_ranked$Freq)
hist(pub_tab_ranked$Freq, bins=50)
hist(pub_tab_ranked$Freq, breaks=50)
hist(log(pub_tab_ranked$Freq), breaks=50)
hist(log(pub_tab_ranked$Freq), breaks=20)
hist(pub_tab_ranked$Freq, breaks=20)
head(pub_tab_ranked,20)
head(pub_tab_ranked,30)
pub_tab <- as.data.frame(table(ss_data$publisher, ss_data$owners));
head(pub_tab,30)
length(pub_tab)
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab_ranked = pub_tab[order(x$Freq, decreasing = TRUE), ]
head(pub_tab_ranked,20)
head(pub_tab_ranked,30)
pub_tab_ranked[pub_tab_ranked$Freq > 1, ]
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab
pub_tab_gt1 = pub_tab[pub_tab$Freq > 1, ]
pub_tab_gt1
ss_data
aggregate(ss_data[, 3:4], list(d$Publisher), mean)
aggregate(ss_data[, 3:4], list(ss_data$Publisher), mean)
ss_data
aggregate(ss_data[, 4], list(ss_data$Publisher), mean)
ss_data[, 4]
hist(log(pub_tab_ranked$Freq), breaks=50)
hist(pub_tab_ranked$Freq, bins=50)
hist(pub_tab_ranked$Freq, breaks=50)
head(pub_tab_ranked,30)
pub_tab_gt1 = pub_tab[pub_tab$Freq > 1, ]
pub_tab_gt1 = pub_tab[pub_tab$Freq > 1, ]
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab_gt1    = pub_tab[pub_tab$Freq > 1, ]
pub_tab_ranked = pub_tab_gt1[order(x$Freq, decreasing = TRUE), ]
hist(pub_tab_ranked$Freq, breaks=50)
hist(pub_tab_ranked$Freq, breaks=50)pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab_gt2    = pub_tab[pub_tab$Freq > 2, ]
pub_tab_ranked = pub_tab_gt1[order(x$Freq, decreasing = TRUE), ]
hist(pub_tab_ranked$Freq, breaks=50)
head(pub_tab_ranked,30)
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab_gt2    = pub_tab[pub_tab$Freq > 2, ]
pub_tab_ranked = pub_tab_gt1[order(x$Freq, decreasing = TRUE), ]
hist(pub_tab_ranked$Freq, breaks=50)
head(pub_tab_ranked,30)
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab_gt2    = pub_tab[pub_tab$Freq > 2, ]
pub_tab_ranked = pub_tab_gt2[order(x$Freq, decreasing = TRUE), ]
hist(pub_tab_ranked$Freq, breaks=50)
head(pub_tab_ranked,30)
pub_tab <- as.data.frame(table(ss_data$publisher));
pub_tab_gt2    = pub_tab[pub_tab$Freq > 2, ]
pub_tab_gt2
pub_tab_ranked = pub_tab_gt2[order(pub_tab_gt2$Freq, decreasing = TRUE), ]
head(pub_tab_ranked,30)
hist(pub_tab_ranked$Freq, breaks=50)
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$avg_playtime_forever,
ss_data$players_forever,
xlab="Players forever",
ylab="Owners",
log = "")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$avg_playtime_forever,
ss_data$players_forever,
xlab="Players forever",
ylab="Owners",
log = "xy")
# Set working directory to your workspace ...
setwd("/my/workspace/steam-spy-analysis")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
plot(ss_data$players_forever,
ss_data$avg_playtime_forever,
xlab="players_forever",
ylab="avg_playtime_forever",
log = "xy")
plot(ss_data$owners,
ss_data$players_forever,
xlab="owners",
ylab="players_forever",
log = "xy")
# Read and display data
ss_data = read.csv("output/steamspy_out.csv")
ss_data
ss_data$po_ratio <- ss_data$players_forever / ss_data$owners
head(ss_data)
hist(ss_data$po_ratio)
hist(ss_data$po_ratio, breaks=50)
hist(ss_data$po_ratio, breaks=150)
head(ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
)
head(ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ],50)
head(ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ],100)
head(ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ],500)
ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
best_po_ratio = ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
head(best_po_ratio)
best_po_ratio[best_po_ratio$po_ratio > 1]
best_po_ratio[best_po_ratio$po_ratio > 1,]
best_po_ratio[0.95 > best_po_ratio$po_ratio < 1.01,]
best_po_ratio[best_po_ratio$po_ratio < 1.01,]
head(best_po_ratio[best_po_ratio$po_ratio < 1.01,])
head(best_po_ratio[best_po_ratio$po_ratio < 1.03,])
head(best_po_ratio[best_po_ratio$po_ratio < 1.02,])
head(best_po_ratio[best_po_ratio$po_ratio < 1.01,])
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
select(best_po_ratio, c("owners"))
subset(best_po_ratio, c("owners"))
best_po_ratio[,c("owners")]
best_po_ratio[,c("appid","po_ratio","","","owners")]
best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")]
best_po_ratio[,c("appid","name","po_ratio"]
best_po_ratio[,c("appid","name","po_ratio")]
head(best_po_ratio[,c("appid","name","po_ratio")], 50)
head(best_po_ratio[,c("appid","name","po_ratio","players","owners")], 50)
head(best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")], 50)
head(best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")], 100)
head(best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")], 00)
head(best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")], 200)
head(best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")], 300)
head(best_po_ratio[,c("appid","name","po_ratio","players_forever","owners")], 200)
hist(ss_data$avg_playtime_forever)
hist(log(ss_data$avg_playtime_forever)
;
hist(log(ss_data$avg_playtime_forever))
hist(ss_data$owners)
hist(ss_data$owners, breaks=300)
hist(ss_data$owners)
hist(log(ss_data$avg_playtime_forever))
log
hist(log(ss_data$avg_playtime_forever), breaks=50)
hist(ss_data$avg_playtime_forever)
hist(ss_data$avg_playtime_forever, breaks=50)
hist(ss_data$avg_playtime_forever, breaks=150)
hist(log(ss_data$avg_playtime_forever), breaks=50)
hist(ss_data$owners, breaks=150)
hist(log(ss_data$owners, breaks=150)
;
hist(log(ss_data$owners), breaks=150)
hist(log(ss_data$owners), breaks=100)
hist(log(ss_data$owners), breaks=200)
hist(log(ss_data$owners), breaks=100)
hist(log(ss_data$owners), breaks=250)
hist(log(ss_data$owners), breaks=100)
mean(log(ss_data$owners))
mean()
help mean()
mean(c(1,2,3))
mean(log(ss_data$owners))
hist(log(ss_data$avg_playtime_forever))
hist(log(ss_data$avg_playtime_forever), breaks=50)
hist(log(ss_data$players_forever), breaks=100)
hist(log(ss_data$players_forever), breaks=100)
mean(log(ss_data$owners))
hist(log(ss_data$owners), breaks=100)
mean(ss_data$owners)
mean(ss_data$players_forever)
log(ss_data$owners)
log_owners = log(ss_data$owners)
log_owners
log_owners[ ! -Inf]
ss_data$owners
ss_data$owners[ ss_data$owners != 0 ]
ss_data$owners
ss_data$owners[ ss_data$owners != 0 ]
log(ss_data$owners[ ss_data$owners != 0 ])
hist(log(ss_data$owners[ ss_data$owners != 0 ]))
hist(log(ss_data$owners[ ss_data$owners != 0 ]), breaks=50)
hist(log(ss_data$owners[ ss_data$owners != 0 ]), breaks=100)
hist(log(ss_data$owners[ ss_data$owners != 0 ]), breaks=150)
hist(log(ss_data$owners[ ss_data$owners != 0 ]), breaks=200)
mean(log(ss_data$owners[ ss_data$owners != 0 ]))
best_po_ratio = ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
best_po_ratio
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
mean(best_po_ratio)
mean(best_po_ratio$po_ratio)
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio
best_po_ratio = ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
best_po_ratio
best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio = ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio
length()best_po_ratio)
length(best_po_ratio)
size(best_po_ratio)
dim(best_po_ratio
)
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio != NA,]
dim(best_po_ratio)
best_po_ratio
best_po_ratio = ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
ss_data$po_ratio
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio != NaN,]
ss_data$po_ratio
best_po_ratio[best_po_ratio$po_ratio != NaN,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio != NaN,]
best_po_ratio = ss_data[ order(ss_data$po_ratio, decreasing = TRUE), ]
best_po_ratio
best_po_ratio[best_po_ratio$po_ratio != NaN,]
best_po_ratio[best_po_ratio$po_ratio > NaN,]
best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio[best_po_ratio$po_ratio > 0.99,]
best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio[best_po_ratio$name != NA,]
between
best_po_ratio[best_po_ratio$name > 0.95,]
best_po_ratio[best_po_ratio$po_ratio > 0.95,]
tmp1 = best_po_ratio[best_po_ratio$po_ratio > 0.95,]
tmp1
tmp1$name
tmp1$owners
ss_data = read.csv("output/steamspy_out.csv")
ss_data$po_ratio <- ss_data$players_forever / ss_data$owners
ss_data$po_ratio
hist(ss_data$po_ratio, breaks=150)
dim(ss_data$po_ratio)
length(ss_data$po_ratio)
dim(ss_data)
ss_data[complete.cases,]
ss_data[complete.cases(ss_data),]
ss_data_pos = ss_data[complete.cases(ss_data),]
dim(ss_data_pos)
hist(ss_data_pos$po_ratio, breaks=150)
best_po_ratio = ss_data_pos[ order(ss_data_pos$po_ratio, decreasing = TRUE), ]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio > 0.9,]
best_po_ratio
best_po_ratio
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
best_po_ratio = ss_data_pos[ order(ss_data_pos$po_ratio, decreasing = TRUE), ]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 0.95,]
best_po_ratio
hist(best_po_ratio$score_rank)
hist(best_po_ratio$owners)
hist(log(best_po_ratio$owners)
)
hist(best_po_ratio$players_forever)
hist(log(best_po_ratio$players_forever))
hist(log(best_po_ratio$avg_playtime_forever))
hist(best_po_ratio$po_ratio)
best_po_ratio = ss_data_pos[ order(ss_data_pos$po_ratio, decreasing = TRUE), ]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.01,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio > 0.95,]
hist(best_po_ratio$po_ratio)
best_po_ratio[best_po_ratio$po_ratio == 1,]
po_one = best_po_ratio[best_po_ratio$po_ratio == 1,]
po_one$owners
hist(po_one$owners)
po_one
po_one[po_one$po_ratio == 1 && po_one$owners > 5000]
po_one[po_one$po_ratio == 1 && po_one$owners > 5000,]
po_one[po_one$po_ratio == 1 and po_one$owners > 5000,]
po_one[po_one$po_ratio == 1 & po_one$owners > 5000,]
po_one[po_one$po_ratio == 1 & po_one$owners > 10000,]
best_po_ratio = ss_data_pos[ order(ss_data_pos$po_ratio, decreasing = TRUE), ]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.00,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio
best_po_ratio[ order(best_po_ratio$avg_playtime_forever, decreasing = TRUE), ]
best_po_ratio[ order(best_po_ratio$score_rank, decreasing = TRUE), ]
best_po_ratio[ order(best_po_ratio$score_rank, decreasing = TRUE), ]
best_po_ratio = ss_data_pos[ order(ss_data_pos$po_ratio, decreasing = TRUE), ]
best_po_ratio = best_po_ratio[best_po_ratio$owners > 10000,]
dim(best_po_ratio)
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio < 1.00,]
best_po_ratio = best_po_ratio[best_po_ratio$po_ratio > 0.95,]
best_po_ratio[ order(best_po_ratio$avg_playtime_forever, decreasing = TRUE), ]
ss_data[ order(ss_data$avg_playtime_forever, decreasing = TRUE), ]
head(ss_data[ order(ss_data$avg_playtime_forever, decreasing = TRUE), ],100)
log = "xy")
plot(ss_data$avg_playtime_forever,
ss_data$po_ratio,
xlab="avg_playtime_forever",
ylab="po_ratio",
log = "xy")
hist(ss_data$po_ratio)
plot(ss_data$avg_playtime_forever,
ss_data$po_ratio,
xlab="avg_playtime_forever",
ylab="po_ratio",
log = "x")
qqPlot(ss_data$avg_playtime_forever, "log-normal")
qqplot(ss_data$avg_playtime_forever, "log-normal")
qqnorm( log(ss_data$avg_playtime_forever) )
log_playtime = log(ss_data$avg_playtime_forever)
log_playtime[!rowSums(!is.finite(log_playtime)),]
log_playtime
log_playtime[!rowSums(!is.finite(log_playtime))]
log_playtime[is.finite(log_playtime)]
qqnorm(log_playtime[is.finite(log_playtime)])
qqline(log_playtime[is.finite(log_playtime)])
